#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define FUN  3
#define SYM  4
#define MEDIA  5
#define BLU 6

/*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        leftParet {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <6 7>;
            layers = <0>;
        };

        rightParet {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
            layers = <0>;
        };

        minusCombo {
            bindings = <&kp MINUS>;
            key-positions = <32 33>;
            layers = <0>;
        };

        capslock {
            bindings = <&caps_word>;
            key-positions = <4 5>;
            layers = <0>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <22 21>;
            layers = <0>;
            timeout-ms = <40>;
        };

        redo {
            bindings = <&kp LG(Y)>;
            key-positions = <23 22>;
            layers = <0>;
            timeout-ms = <40>;
        };

        printscreen {
            bindings = <&kp LG(LS(N5))>;
            key-positions = <1 2 3>;
            layers = <0>;
            timeout-ms = <40>;
        };

        esc-blu {
            bindings = <&lt 6 ESC>;
            key-positions = <31 30>;
        };
    };

    behaviors {
        rht: repeatHoldTap {
            compatible = "zmk,behavior-hold-tap";
            label = "REPEATHOLDTAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <120>;
            quick-tap-ms = <200>;
        };

        lh_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <120>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;// <---[[left-hand keys]]
            hold-while-undecided;
        };

        rh_pht: r_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <120>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;// <---[[right-hand keys]]
            hold-while-undecided;
        };




  hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>;// <---[[right-hand keys]]
            // hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;// <---[[left-hand keys]]
            // hold-trigger-on-release;
        };



        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        shift: shift {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <120>;
            quick-tap-ms = <200>;
        };
    };

    macros {
        euro: euro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(NUMBER_0) &kp LA(NUMBER_1) &kp LA(NUMBER_2) &kp LA(N8)>;
            label = "EURO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                   &kp W       &kp E       &kp R              &kp T         &kp Y          &kp U              &kp I        &kp O                &kp P
&mt RA(LEFT_CONTROL) A  &mt LALT S  &mt LGUI D  &bhm LEFT_SHIFT F  &kp G         &kp H          &bhm LEFT_SHIFT J  &mt RGUI K   &mt RALT L           &mt RIGHT_CONTROL SEMICOLON
&kp Z                   &kp X       &kp C       &kp V              &kp B         &kp N          &kp M              &kp COMMA    &td EXCLAMATION DOT  &kp SLASH
                                    &lt 5 ESC   &lt 1 SPACE        &rht 1 SPACE  &rht NUM BSPC  &lt SYM DEL        &lt FUN RET

            >;
        };

        nav_layer {
            bindings = <
&kp LC(Z)         &kp LC(X)  &kp LC(C)     &kp LC(V)  &kp LC(Y)      &kp PG_UP      &none           &kp UP_ARROW    &none      &none
&kp LEFT_CONTROL  &kp LALT   &kp LEFT_GUI  &kp LSHFT  &kp PAGE_UP    &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &trans
&trans            &trans     &trans        &trans     &kp PAGE_DOWN  &kp INSERT     &kp HOME        &none           &none      &kp END
                             &trans        &trans     &trans         &trans         &trans          &trans
            >;
        };

        num_layer {
            bindings = <
&kp APOSTROPHE    &kp N7  &kp N8  &kp N9  &kp EQUAL  &kp DOLLAR            &euro      &trans         &trans    &trans
&kp LEFT_BRACKET  &kp N4  &kp N5  &kp N6  &kp PLUS   &kp LA(LS(NUMBER_2))  &kp LSHFT  &kp RIGHT_GUI  &kp LALT  &kp RIGHT_CONTROL
&kp N0            &kp N1  &kp N2  &kp N3  &kp DOT    &trans                &trans     &trans         &trans    &trans
                          &trans  &kp N0  &trans     &trans                &trans     &trans
            >;
        };

        fun_layer {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &kp LG(LS(S))    &trans  &trans     &trans         &trans    &trans
&kp F11  &kp F4  &kp F5  &kp F6  &kp SYSREQ       &trans  &kp LSHFT  &kp RIGHT_GUI  &kp LALT  &kp RIGHT_CONTROL
&kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK  &trans  &trans     &trans         &trans    &trans
                 &trans  &trans  &trans           &trans  &trans     &trans
            >;
        };

        sym_layer {
            bindings = <
&kp LS(LBKT)   &kp LS(N7)  &kp LS(N8)      &kp LS(N9)  &kp LS(RBKT)   &trans  &trans     &trans    &trans    &trans
&kp LS(SEMI)   &kp LS(N4)  &kp LS(N5)      &kp LS(N6)  &kp LS(EQUAL)  &trans  &kp LSHFT  &kp RGUI  &kp LALT  &kp RIGHT_CONTROL
&kp LS(GRAVE)  &kp LS(N1)  &kp LS(N2)      &kp LS(N3)  &kp LS(BSLH)   &trans  &trans     &trans    &trans    &trans
                           &kp LS(PERIOD)  &kp LS(N0)  &kp LS(MINUS)  &trans  &trans     &trans
            >;
        };

        media_layer {
            bindings = <
&trans            &trans    &trans        &trans     &trans  &kp PRINTSCREEN  &trans             &none            &trans      &trans
&kp LEFT_CONTROL  &kp LALT  &kp LEFT_GUI  &kp LSHFT  &trans  &kp C_PREVIOUS   &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &trans
&trans            &trans    &trans        &trans     &trans  &trans           &trans             &kp C_MUTE       &trans      &trans
                            &trans        &trans     &trans  &kp C_STOP       &kp C_PLAY_PAUSE   &kp K_MUTE
            >;
        };

        blu_layer {
            bindings = <
&out OUT_BLE  &trans        &trans        &trans        &out OUT_USB  &bt BT_CLR  &trans      &trans      &trans  &trans
&trans        &none         &none         &trans        &trans        &trans      &bt BT_PRV  &bt BT_NXT  &trans  &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &out OUT_BLE  &trans      &trans      &trans      &trans  &trans
                            &trans        &trans        &trans        &trans      &trans      &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
